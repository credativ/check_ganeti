#!/usr/bin/perl

# Copyright (c) 2014, Evgeni Golov
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice, this
#   list of conditions and the following disclaimer in the documentation and/or
#   other materials provided with the distribution.
#
# * Neither the name of the {organization} nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

use strict;
use warnings;
use JSON;
use LWP;
use Nagios::Plugin;
use Date::Parse;

my $np = Nagios::Plugin->new(
    usage => "Usage: %s [ -H|--hostname=<hostname>] " . "[ -p|--port=<port> ] " . "[ -U|--username=<username> ] " . "[ -P|--password=<password> ]",
    shortname => 'Check Ganeti cluster health',
    url       => 'https://github.com/credativ/check_ganeti',
    version   => '0.1',
    license   => 'This plugin is free software, and comes with ABSOLUTELY
NO WARRANTY. It may be used, redistributed and/or modified under
the terms of the BSD 3-clause license.',
);

$np->add_arg(
    spec    => 'hostname|H=s',
    help    => 'Hostname of the Ganeti master (default: %s)',
    default => 'localhost',
);

$np->add_arg(
    spec    => 'port|p=i',
    help    => 'Port the Ganetii RAPI is running on (default: %s)',
    default => 5080,
);

$np->add_arg(
    spec    => 'username|U=s',
    help    => 'Username for basic authentication',
    default => undef,
);

$np->add_arg(
    spec    => 'password|P=s',
    help    => 'Password for basic authentication',
    default => undef,
);

$np->add_arg(
    spec    => 'realm|R=s',
    help    => 'Realm for basic authentication (default: "%s")',
    default => 'Ganeti Remote API',
);

$np->getopts;

my $url = sprintf( 'https://%s:%d/', $np->opts->hostname, $np->opts->port );

my $ua = new LWP::UserAgent;
$ua->default_header( 'Accept' => 'application/json' );
$ua->ssl_opts( verify_hostname => 0, SSL_verify_mode => 0 );
if ($np->opts->username && $np->opts->password) {
    $ua->credentials(
        $np->opts->hostname . ':' . $np->opts->port,
        $np->opts->realm,
        $np->opts->username,
        $np->opts->password
    );
}

# get general information about the cluster

my $response = $ua->get( $url . '2/info' );

if ( !$response->is_success ) {
    $np->nagios_exit( 'UNKNOWN',
        $response->code . ": " . $response->status_line );
}

my $data = decode_json( $response->decoded_content );

my $cluster_name     = $data->{'name'};
my $cluster_master   = $data->{'master'};
my $cluster_sversion = $data->{'software_version'};

#$np->add_message('WARNING', "$cluster_name, master: $cluster_master");

# get node information

$response = $ua->get( $url . '2/nodes?bulk=1' );

if ( !$response->is_success ) {
    $np->nagios_exit( 'UNKNOWN',
        $response->code . ": " . $response->status_line );
}

$data = decode_json( $response->decoded_content );

foreach my $node (@$data) {
    my $name    = $node->{'name'};
    my $offline = $node->{'offline'};
    if ( $offline ne 'false' ) {
        $np->add_message( 'WARNING', "Node $name is offline" );
    }
}

# get instance information

$response = $ua->get( $url . '2/instances?bulk=1' );

if ( !$response->is_success ) {
    $np->nagios_exit( 'UNKNOWN',
        $response->code . ": " . $response->status_line );
}

$data = decode_json( $response->decoded_content );

foreach my $instance (@$data) {
    my $name        = $instance->{'name'};
    my $admin_state = $instance->{'admin_state'};
    my $status      = $instance->{'status'};

    if ( $admin_state eq 'up' ) {
        if ( $status eq 'running' ) {
            # OK
        }
        elsif ( $status eq 'ERROR_wrongnode' ) {
            $np->add_message( 'WARNING',
                "Instance $name is $status, but admin set $admin_state" );
        }
        else {
            $np->add_message( 'CRITICAL',
                "Instance $name is $status, but admin set $admin_state" );
        }
    }

    elsif ( $admin_state eq 'down' ) {
        if ( $status ne 'ADMIN_down' ) {
            $np->add_message( 'CRITICAL',
                "Instance $name is $status, but admin set $admin_state" );
        }
    }

    else {
        $np->add_message( 'UNKNOWN',
            "Instance $name is $status, but admin set $admin_state" );
    }
}

my $code;
my $message;
( $code, $message ) = $np->check_messages;

$np->nagios_exit( $code, $message );
